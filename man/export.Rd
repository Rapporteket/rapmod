% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/export.R
\name{export}
\alias{export}
\alias{export_ui}
\alias{export_server}
\alias{export_app}
\alias{select_list_pubkey}
\alias{export_db}
\title{Shiny modules providing ui and server logic for export of registry data.}
\usage{
export_ui(id)

export_server(
  id,
  registry_name,
  repo_name = registry_name,
  proxy_url = NULL,
  token = NULL,
  eligible = TRUE
)

export_app(registry_name = "rapbase")

select_list_pubkey(pubkey)

export_db(registry_name, compress = FALSE, session)
}
\arguments{
\item{id}{Character string module ID}

\item{registry_name}{Character string registry name key}

\item{repo_name}{Character string defining the github repository name of the
registry. Default value is \code{registry_name}.}

\item{proxy_url}{Character string providing an internet proxy server url.
When set to NULL (default) no proxy server is assumed.}

\item{token}{Character string representing a GitHub Personal Access Token
(PAT) that will be needed if calls to the github api requires
authorization. In a development context and if the GITHUB_PAT environmental
variable is set \code{token} can be left to its default (NULL). In
production-like environments \code{token} should always be explicitly set.}

\item{eligible}{Logical defining if the module should be allowed to work at
full capacity. This might be useful when access to module products should
be restricted. Default is TRUE, \emph{i.e.} no restrictions.}

\item{pubkey}{Character vector with public keys}

\item{compress}{Logical if export data is to be compressed (using gzip).
FALSE by default.}

\item{session}{Shiny session object}
}
\value{
Shiny objects, mostly. Helper functions may return other stuff too.
}
\description{
Functions for registries that wants to implement exporting of registry
databases, \emph{e.g.} for local development purposes. Also includes
relevant helper functions.
}
\examples{
## client user interface function
ui <- shiny::fluidPage(
  shiny::sidebarLayout(
    shiny::sidebarPanel(
      export_ui("test"),
    ),
    shiny::mainPanel(
      NULL
    )
  )
)

## server function
server <- function(input, output, session) {
  export_server("test", registry_name = "rapbase")
}

## run the shiny app in an interactive environment
if (interactive()) {
  shiny::shinyApp(ui, server)
}
}
